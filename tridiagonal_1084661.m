function x = tridiagonal_1084661(A, B)
    
    % Εξαγωγή διαγωνίων από το τριδιαγώνιο μητρώο A
    D = diag(A); % Διαγώνιος
    L = diag(A, -1); % Κάτω διαγώνιος
    U = diag(A, 1); % Άνω διαγώνιος
    L = [0; L]; % Προσθήκη ενός μηδενικού στην αρχή του διανύσματος L
    U = [U; 0]; % Προσθήκη ενός μηδενικού στο τέλος του διανύσματος U

    % Προ-αρχικοποίηση της λύσης x
    x = zeros(size(B));

    % Επίλυση για κάθε διάνυσμα του B (δεξί μέλος)
    for k = 1:size(B, 2)
        bk = B(:, k);

        % Υπολογισμός του μετασχηματισμένου διανύσματος b
        new_b = (D + L + U) ./ D .* bk;

        % Λύση του νέου συστήματος
        % Χρησιμοποιήστε την επιθυμητή μέθοδο επίλυσης (π.χ. Thomas algorithm)
        n = length(D)
        Cp = zeros(n, 1);
        Dp = zeros(n, 1);
        x = zeros(n, 1);
    
        % Πρώτο βήμα του αλγορίθμου Thomas
        Dp(1) = D(1);
        Cp(1) = U(1) / Dp(1);
        bp(1) = new_b(1) / Dp(1);
    
        % Προς τα εμπρός υπολογισμοί
        for i = 2:n-1
            Dp(i) = D(i) - L(i) * Cp(i-1);
            Cp(i) = U(i) / Dp(i);
            bp(i) = (new_b(i) - L(i) * bp(i-1)) / Dp(i);
        end
    
        % Τελευταίο βήμα προς τα εμπρός
        Dp(n) = D(n) - L(n) * Cp(n-1);
        bp(n) = (new_b(n) - L(n) * bp(n-1)) / Dp(n);
    
        % Οπισθοδρομική αντικατάσταση
        x(n) = bp(n);
        for i = n-1:-1:1
            x(i) = bp(i) - Cp(i) * x(i+1);
        end
    end
end
